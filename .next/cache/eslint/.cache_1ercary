[{"/home/barbara/glacier/db-of-objects-app/app/components/FileUploadHandler.tsx":"1","/home/barbara/glacier/db-of-objects-app/app/components/Footer.tsx":"2","/home/barbara/glacier/db-of-objects-app/app/components/Icons.tsx":"3","/home/barbara/glacier/db-of-objects-app/app/components/ImageCropper.tsx":"4","/home/barbara/glacier/db-of-objects-app/app/layout.tsx":"5","/home/barbara/glacier/db-of-objects-app/app/page.tsx":"6"},{"size":4293,"mtime":1730831004945,"results":"7","hashOfConfig":"8"},{"size":888,"mtime":1730831004945,"results":"9","hashOfConfig":"8"},{"size":1498,"mtime":1730831004945,"results":"10","hashOfConfig":"8"},{"size":1551,"mtime":1730831004945,"results":"11","hashOfConfig":"8"},{"size":958,"mtime":1730831004945,"results":"12","hashOfConfig":"8"},{"size":18360,"mtime":1731454192851,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"solcmy",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/home/barbara/glacier/db-of-objects-app/app/components/FileUploadHandler.tsx",[],[],"/home/barbara/glacier/db-of-objects-app/app/components/Footer.tsx",[],[],"/home/barbara/glacier/db-of-objects-app/app/components/Icons.tsx",[],[],"/home/barbara/glacier/db-of-objects-app/app/components/ImageCropper.tsx",[],[],"/home/barbara/glacier/db-of-objects-app/app/layout.tsx",[],[],"/home/barbara/glacier/db-of-objects-app/app/page.tsx",["33"],[],"\"use client\";\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport videojs from 'video.js';\nimport type VideoJsPlayer from 'video.js/dist/types/player';\nimport 'video.js/dist/video-js.css';\nimport Layout from './layout';\nimport './styles.css';\nimport { track } from '@vercel/analytics';\nimport Head from 'next/head';\n\n// Components\nimport { PhotoFrameIcon, MagnifyingGlassIcon, QuestionMarkCircleIcon } from './components/Icons';\nimport Footer from './components/Footer';\nimport { handleFileUpload } from './components/FileUploadHandler';\n\n// Handles Python backend API URL based on the environment\n// Handles Python backend API URL based on the environment\nconst API_URL = (() => {\n  switch (process.env.NEXT_PUBLIC_VERCEL_ENV) {\n    case \"development\":\n      return process.env.NEXT_PUBLIC_DEVELOPMENT_URL || 'http://localhost:8000';\n    case \"production\":\n      return `https://${process.env.NEXT_PUBLIC_VERCEL_PROJECT_PRODUCTION_URL || ''}`;\n    default:\n      return \"http://localhost:8000\";\n  }\n})();\n\ninterface Result {\n  score: number;\n  metadata: {\n    class: string;\n    date_added: string;\n    s3_file_name: string;\n    s3_file_path: string;\n    s3_presigned_url: string;\n    file_type: 'image' | 'video' | 'text';\n    start_offset_sec: number;\n    end_offset_sec: number;\n    interval_sec: number;\n    segment: number;\n  };\n}\n\nexport default function Home() {\n  const [query, setQuery] = useState<string>('');\n  const [results, setResults] = useState<Result[]>([]);\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n  const [isSearching, setIsSearching] = useState<boolean>(false);\n  const [dragging, setDragging] = useState<boolean>(false);\n  const [totalVectors, setTotalVectors] = useState<number | null>(null);\n  const [isSearchComplete, setIsSearchComplete] = useState<boolean>(false);\n  const [searchTime, setSearchTime] = useState<number | null>(null);\n  const [searchType, setSearchType] = useState<'text' | 'image' | 'video' | null>(null);\n  const [isInputEmpty, setIsInputEmpty] = useState<boolean>(true);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [isLoadingResults, setIsLoadingResults] = useState<boolean>(false);\n  const [showSuggestions, setShowSuggestions] = useState<boolean>(false);\n  const suggestions = [\n    \"red coke can\",\n    \"green plastic\",\n    \"cardboard\"\n  ];\n  const handleSuggestionClick = (suggestion: string) => {\n    setQuery(suggestion);\n    setIsInputEmpty(false);\n    setShowSuggestions(false);\n  };\n\n  const clearResults = () => {\n    setQuery('');\n    setResults([]);\n    setIsInputEmpty(true);\n    setIsSearchComplete(false);\n    setSearchTime(null);\n    setSearchType(null);\n    setErrorMessage(null);\n  };\n\n  const playersRef = useRef<{ [key: string]: VideoJsPlayer }>({});\n\n  const VerticalDivider = () => (\n    <div className=\"h-6 w-px bg-gray-200\"></div>\n  );\n\n  useEffect(() => {\n    let scrollTracked = false;\n    const handleScroll = () => {\n      const scrollPercentage = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;\n      if (scrollPercentage > 50 && !scrollTracked) {\n        track('scroll_depth', { depth: '50%' });\n        scrollTracked = true;\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    const pageViewData = {\n      timestamp: new Date().toISOString(),\n      screenSize: `${window.screen.width}x${window.screen.height}`,\n      deviceType: /Mobi|Android/i.test(navigator.userAgent) ? 'mobile' : 'desktop',\n      browserName: navigator.userAgent,\n      referrer: document.referrer,\n      loadTime: performance.now(),\n      language: navigator.language,\n      totalVectors: totalVectors,\n      appVersion: process.env.NEXT_PUBLIC_APP_VERSION || 'unknown',\n    };\n\n    track('page_viewed', pageViewData);\n  }, [totalVectors]);\n\n  useEffect(() => {\n\n    const fetchTotalVectors = async () => {\n      try {\n        const response = await axios.get(`${API_URL}/api/index/info`);\n        setTotalVectors(response.data.total_vectors);\n      } catch (error) {\n        console.error('Error fetching total vectors:', error);\n      }\n    };\n\n    fetchTotalVectors();\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      Object.values(playersRef.current).forEach(player => {\n        if (player && typeof player.dispose === 'function') {\n          player.dispose();\n        }\n      });\n      playersRef.current = {};\n    };\n  }, []);\n\n  useEffect(() => {\n    results.forEach((result, index) => {\n      if (result.metadata.file_type === 'video') {\n        const videoId = getVideoId(result, index);\n        const videoElement = document.getElementById(videoId) as HTMLVideoElement;\n\n        if (videoElement && !playersRef.current[videoId]) {\n          const player = videojs(videoElement, {\n            aspectRatio: '1:1',\n            fluid: true,\n            controls: true,\n            muted: true,\n            preload: 'auto'\n          });\n\n          player.one('ready', () => {\n            player.currentTime(result.metadata.start_offset_sec);\n          });\n\n          playersRef.current[videoId] = player;\n        }\n      }\n    });\n\n    return () => {\n      Object.keys(playersRef.current).forEach(videoId => {\n        if (!results.some((result, index) => getVideoId(result, index) === videoId)) {\n          playersRef.current[videoId].dispose();\n          delete playersRef.current[videoId];\n        }\n      });\n    };\n  }, [results]);\n\n  const resetSearchState = () => {\n    setResults([]);\n    setIsSearchComplete(false);\n    setSearchTime(null);\n    setSearchType(null);\n    setErrorMessage(null);\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (isInputEmpty) return;\n\n    setShowSuggestions(false);\n\n    resetSearchState();\n\n    setIsSearching(true);\n    setIsSearchComplete(false);\n    setSearchTime(null);\n    setSearchType('text');\n    setErrorMessage(null);\n    setIsLoadingResults(true);\n    const startTime = Date.now();\n    try {\n      const response = await axios.post(`${API_URL}/api/search/text`, { query });\n      setResults(response.data.results);\n      const endTime = Date.now();\n      setSearchTime(endTime - startTime);\n      setIsSearchComplete(true);\n      track('search_results', {\n        searchType,\n        query,\n        searchTime\n      });\n    } catch (error) {\n      console.error('Error during text search:', error);\n      if (axios.isAxiosError(error) && error.response) {\n        setErrorMessage(`Oops! ${error.response.data.detail || 'An unexpected error occurred'}`);\n      } else {\n        setErrorMessage('Oops! An unexpected error occurred. Our engineers have been notified.');\n      }\n    } finally {\n      setIsSearching(false);\n      setIsLoadingResults(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setQuery(value);\n    setIsInputEmpty(value.trim() === '');\n    setShowSuggestions(value.trim() !== '');\n  };\n\n  const handleFileUploadWrapper = async (file: File) => {\n    resetSearchState();\n    await handleFileUpload(file, {\n      API_URL,\n      setSearchType,\n      setErrorMessage,\n      setIsUploading,\n      setIsSearchComplete,\n      setSearchTime,\n      setIsLoadingResults,\n      setResults,\n      setQuery,\n      setIsInputEmpty,\n      setIsSearching\n    });\n  };\n\n  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      track('file_selected');\n      await handleFileUploadWrapper(e.target.files[0]);\n    }\n  };\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n  }, []);\n\n  const handleDrop = async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragging(false);\n\n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      track('file_dropped');\n      await handleFileUploadWrapper(e.dataTransfer.files[0]);\n    }\n  };\n\n  const getScoreLabel = (score: number) => {\n    return { score: score.toFixed(4) };\n  };\n\n  const getVideoId = (result: Result, index: number) => `video-${index}-${result.metadata.s3_file_path}`;\n\n  return (\n    <Layout>\n      <Head>\n        <title>Shop The Look</title>\n      </Head>\n      <div\n        className={`flex flex-col items-center justify-start min-h-screen bg-gray-100 ${dragging ? 'border-4 border-dashed border-blue-500' : ''\n          }`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        style={{ fontFamily: \"'Inter', 'Helvetica', 'Arial', sans-serif\" }}\n      >\n        <div className=\"max-w-6xl w-full px-4 md:px-0 mt-12\">\n          <h1 className=\"font-sans text-4xl mb-3 text-center text-indigo-800\">Universal database of objects</h1>\n          <h1 className=\"font-sans text-base mb-5 text-center text-gray-900\">Upload a photo or video (under 4.5 MB) or search by text</h1>\n          <div className=\"max-w-xl mx-auto relative\">\n            <form onSubmit={handleSubmit} className=\"flex items-center\">\n              <div className=\"flex-grow flex items-center bg-white rounded shadow-md\">\n                <div className=\"flex-grow relative\">\n                  <input\n                    type=\"text\"\n                    value={query}\n                    onChange={handleInputChange}\n                    onFocus={() => setShowSuggestions(true)}\n                    onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n                    placeholder=\"Describe the object, or drag in an image or video\"\n                    className=\"w-full flex-grow px-6 py-3 text-gray-700 bg-transparent focus:outline-none\"\n                    disabled={isUploading || isSearching}\n                  />\n                  {showSuggestions && suggestions.length > 0 && (\n                    <div className=\"absolute left-0 right-0 mt-2 w-full bg-white border rounded shadow-lg max-h-60 overflow-y-auto z-10\" style={{ width: 'calc(100% + 59px)', marginLeft: '-1px' }}>\n                      <div className=\"mt-3\"></div>\n                      {suggestions.map((suggestion, index) => (\n                        <div\n                          key={index}\n                          className=\"px-6 py-1.5 hover:bg-gray-100 cursor-pointer text-gray-700  flex items-center\"\n                          onClick={() => handleSuggestionClick(suggestion)}\n                        >\n                          <MagnifyingGlassIcon className=\"h-4 w-4 mr-3 text-indigo-500\" />\n                          {suggestion}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  </div>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*,video/*\"\n                    onChange={handleFileChange}\n                    style={{ display: 'none' }}\n                    id=\"upload-input\"\n                    disabled={isUploading || isSearching}\n                  />\n                  {!isInputEmpty && (\n                    <>\n                      <button\n                        type=\"button\"\n                        onClick={clearResults}\n                        className=\"text-gray-400 hover:text-gray-500 mr-0.5 focus:outline-none\"\n                        disabled={isUploading || isSearching}\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"44\"\n                          height=\"44\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"1\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        >\n                          <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n                          <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n                        </svg>\n                      </button>\n                      <VerticalDivider />\n                    </>\n                  )}\n                <label htmlFor=\"upload-input\" className={`cursor-pointer px-4 ${isUploading || isSearching ? 'text-gray-400' : 'text-gray-500 hover:text-gray-700'} focus:outline-none`}>\n                  <PhotoFrameIcon className=\"h-6 w-6\" />\n                </label>\n              </div>\n              <button\n                type=\"submit\"\n                className={`ml-1 px-3 ${isInputEmpty\n                    ? 'text-gray-400 cursor-not-allowed'\n                    : isUploading || isSearching\n                      ? 'text-gray-400 cursor-wait'\n                      : 'text-gray-500 hover:text-gray-700'\n                  } focus:outline-none`}\n                disabled={isInputEmpty || isUploading || isSearching}\n              >\n                <MagnifyingGlassIcon className=\"h-6 w-6 text-indigo-500 hover:text-indigo-700\" />\n              </button>\n            </form>\n\n\n            {errorMessage && (\n              <div className=\"w-full mt-4 text-red-500 text-center\">\n                {errorMessage}\n              </div>\n            )}\n            {(isUploading || isSearching) && (\n              <div className=\"w-full mt-8 flex items-center justify-center\">\n                <span className=\"text-gray-500 pulse\">\n                  {isUploading ? \"Uploading, embedding, and searching...\" : \"Searching...\"}\n                </span>\n                <div className=\"ml-3 spinner border-4 border-t-transparent border-indigo-300 rounded-full w-6 h-6 animate-spin\"></div>\n              </div>\n            )}\n          </div>\n          <div>\n            {isSearchComplete && searchTime !== null && totalVectors !== null && (\n              <div className=\"ml-1 mt-6 mb-2 flex items-center text-left text-gray-700\">\n                <p>\n                  Searched {totalVectors.toLocaleString()} objects\n                  {searchType === 'text' && <> for <strong className=\"text-indigo-800\">{query}</strong></>}\n                  {searchType === 'image' && <> for <strong className=\"text-indigo-800\">your image</strong></>}\n                  {searchType === 'video' && <> for <strong className=\"text-indigo-800\">your video</strong></>}\n                </p>\n                <button\n                  type=\"button\"\n                  onClick={clearResults}\n                  className=\"text-gray-400 hover:text-gray-500 mb-0.4 ml-2 focus:outline-none\"\n                  disabled={isUploading || isSearching}\n                >\n\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"16\"\n                    height=\"16\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  >\n                    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                    <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\" />\n                    <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\" />\n                  </svg>\n                </button>\n              </div>\n            )}\n            {isLoadingResults && (\n              <div className=\"mt-8 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {[...Array(20)].map((_, index) => (\n                  <div key={index} className=\"animate-pulse\">\n                    <div className=\"bg-gray-300 h-64 w-full rounded-sm\"></div>\n                    <div className=\"h-4 bg-gray-300 rounded w-3/4 mt-2\"></div>\n                  </div>\n                ))}\n              </div>\n            )}\n            {!isLoadingResults && results.length > 0 && (\n              <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {results.map((result, index) => {\n                  const { score } = getScoreLabel(result.score);\n                  const videoId = getVideoId(result, index);\n                  return (\n                    <div key={videoId}>\n                      {result.metadata.file_type === 'image' ? (\n                        // Use the presigned URL for image src\n                        <img src={result.metadata.s3_presigned_url} alt=\"Result\" className=\"w-full h-auto object-cover mt-2 rounded hover-shadow\" />\n                      ) : (\n                        <div className=\"video-container mt-2 rounded hover-shadow\">\n                          <video\n                            id={videoId}\n                            className=\"video-js vjs-default\"\n                          >\n                            <source src={result.metadata.s3_presigned_url} type=\"video/mp4\" />\n                            Your browser does not support the video tag.\n                          </video>\n                        </div>\n                      )}\n                      <div className=\"inline-block mt-2 mb-2 px-1 py-1 text-sm text-gray-400 flex items-center\">\n                        Similarity score: {score}. \n                        <div className=\"relative ml-1 group\">\n                          <QuestionMarkCircleIcon className=\"h-4 w-4 text-gray-400\" />\n                          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 bg-gray-500 text-white text-xs rounded py-1 px-2 hidden group-hover:block whitespace-nowrap\">\n                            Cosine similarity score between 0 - 1, higher is more similar.\n                            <a href=\"https://www.pinecone.io/learn/vector-similarity?utm_source=shop-the-look&utm_medium=referral)\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-300 hover:text-blue-200\"> About vector similarity.</a>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n\n              </div>\n            )}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    </Layout>\n  );\n}\n",{"ruleId":"34","severity":1,"message":"35","line":449,"column":25,"nodeType":"36","endLine":449,"endColumn":149},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement"]